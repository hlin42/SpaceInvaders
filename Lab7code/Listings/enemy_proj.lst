


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             GPIO, CODE, READWRITE
    2 00000000                 EXTERN           output_string
    3 00000000                 EXTERN           FIQ_Handler
    4 00000000                 EXTERN           end_of_code
    5 00000000                 EXTERN           rng
    6 00000000                 EXTERN           update_map
    7 00000000                 EXTERN           newline
    8 00000000                 EXTERN           endgame
    9 00000000                 EXPORT           eject_enemy_proj
   10 00000000                 EXPORT           enemy_proj_setups
   11 00000000                 EXPORT           enemy_proj_motion
   12 00000000                 EXPORT           enemy_proj_hits_myship
   13 00000000 40007100 
                       promptoffset
                               EQU              0x40007100
   14 00000000 40007400 
                       proj_offset
                               EQU              0x40007400
   15 00000000 40006000 
                       ship_location
                               EQU              0x40006000
   16 00000000 40007410 
                       proj_exist_on_board_flag
                               EQU              0x40007410
   17 00000000 40007420 
                       Ss_storing_address
                               EQU              0x40007420
   18 00000000 40007430 
                       Ss2_storing_address
                               EQU              0x40007430
   19 00000000 40007440 
                       selected_enemy_that_shoot_proj
                               EQU              0x40007440
   20 00000000 40005000 
                       lives   EQU              0x40005000
   21 00000000 E0028004 
                       IO0SET  EQU              0xE0028004
   22 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C
   23 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   24 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   25 00000000         
   26 00000000 40007120 
                       enemyoffset
                               EQU              0x40007120
   27 00000000 40007130 
                       enemy2offset
                               EQU              0x40007130
   28 00000000 40007140 
                       enemy3offset
                               EQU              0x40007140
   29 00000000 40007150 
                       enemy4offset
                               EQU              0x40007150
   30 00000000 40007160 
                       enemy5offset
                               EQU              0x40007160



ARM Macro Assembler    Page 2 


   31 00000000 40007270 
                       enemycounts
                               EQU              0x40007270
   32 00000000 40007280 
                       enemy2counts
                               EQU              0x40007280
   33 00000000 40007290 
                       enemy3counts
                               EQU              0x40007290
   34 00000000 400072A0 
                       enemy4counts
                               EQU              0x400072A0
   35 00000000 400072B0 
                       enemy5counts
                               EQU              0x400072B0
   36 00000000 40007370 
                       right_enemycounts
                               EQU              0x40007370
   37 00000000 40007380 
                       right_enemy2counts
                               EQU              0x40007380
   38 00000000 40007390 
                       right_enemy3counts
                               EQU              0x40007390
   39 00000000 400073A0 
                       right_enemy4counts
                               EQU              0x400073A0
   40 00000000 400073B0 
                       right_enemy5counts
                               EQU              0x400073B0
   41 00000000 40007500 
                       offset_hit_counts
                               EQU              0x40007500
   42 00000000 40007510 
                       offset2_hit_counts
                               EQU              0x40007510
   43 00000000 40007520 
                       offset3_hit_counts
                               EQU              0x40007520
   44 00000000 40007530 
                       offset4_hit_counts
                               EQU              0x40007530
   45 00000000 40007540 
                       offset5_hit_counts
                               EQU              0x40007540
   46 00000000 40007544 
                       number_of_loops
                               EQU              0x40007544
   47 00000000         
   48 00000000 400074A0 
                       enemy_proj_offset
                               EQU              0x400074A0
   49 00000000 400074B0 
                       enemy_proj_on_board
                               EQU              0x400074B0  ; 0 means no proj o
                                                            n board, 1 means pr
                                                            oj on board
   50 00000000         
   51 00000000 40006900 



ARM Macro Assembler    Page 3 


                       current_score_1
                               EQU              0x40006900
   52 00000000 40006904 
                       current_score_10
                               EQU              0x40006904
   53 00000000 40006908 
                       current_score_100
                               EQU              0x40006908
   54 00000000 4000690C 
                       current_score_1000
                               EQU              0x4000690C
   55 00000000         
   56 00000000 40006920 
                       total_score
                               EQU              0x40006920
   57 00000000         
   58 00000000 40007990 
                       keystork_rng_counter
                               EQU              0x40007990
   59 00000000 40007994 
                       current_keyboard_rng_input
                               EQU              0x40007994
   60 00000000 E0004008 
                       T0TC    EQU              0xE0004008
   61 00000000 40007A20 
                       mothership_location
                               EQU              0x40007A20
   62 00000000 40007A30 
                       timeused_location
                               EQU              0x40007A30
   63 00000000 40007A40 
                       currentscore_location
                               EQU              0x40007A40
   64 00000000         
   65 00000000         
   66 00000000         enemy_proj_setups
   67 00000000 E92D4003        STMFD            SP!, {r0-r1,lr}
   68 00000004         
   69 00000004 E59F0428        LDR              r0, =enemy_proj_offset
   70 00000008 E3A01000        MOV              r1, #0
   71 0000000C E5801000        STR              r1, [r0]
   72 00000010         
   73 00000010 E59F0420        LDR              r0, =number_of_loops
   74 00000014 E3A01000        MOV              r1, #0
   75 00000018 E5801000        STR              r1, [r0]
   76 0000001C         
   77 0000001C         
   78 0000001C         
   79 0000001C E59F0418        LDR              r0, =enemy_proj_on_board
   80 00000020 E3A01000        MOV              r1, #0
   81 00000024 E5801000        STR              r1, [r0]
   82 00000028         
   83 00000028 E8BD4003        LDMFD            SP!, {r0-r1,lr}
   84 0000002C E12FFF1E        BX               lr
   85 00000030         
   86 00000030         eject_enemy_proj
   87 00000030 E92D5FFF        STMFD            SP!, { r0-r12 ,lr}
   88 00000034         
   89 00000034         ;#######################################################



ARM Macro Assembler    Page 4 


                       #################
   90 00000034 E3A0B00A        MOV              r11, #10    ; number in r11 det
                                                            ermines prob = 1/(r
                                                            11)
   91 00000038 E59F0400        LDR              r0, =T0TC
   92 0000003C E5901000        LDR              r1, [r0]
   93 00000040 E3E020FF        LDR              r2, =0xFFFFFF00
   94 00000044 E1C11002        BIC              r1, r1 , r2
   95 00000048 E59F03F4        LDR              r0, =keystork_rng_counter
   96 0000004C E5902000        LDR              r2, [r0]
   97 00000050 E0811002        ADD              r1, r1 ,r2
   98 00000054 E59F03EC        LDR              r0, =current_keyboard_rng_input
   99 00000058 E5902000        LDR              r2, [r0]
  100 0000005C E0811002        ADD              r1, r1 ,r2
  101 00000060 E3E020FF        LDR              r2, =0xFFFFFF00
  102 00000064 E1C11002        BIC              r1, r1 , r2
  103 00000068 E59FA3C8        LDR              r10, =number_of_loops
  104 0000006C E5DA6000        LDRB             r6, [r10]
  105 00000070 E0811006        ADD              r1, r1 ,r6
  106 00000074 E1A0800B        MOV              r8, r11     ; immediates enters
                                                             here shows the ran
                                                            ge of random number
                                                            s
  107 00000078         continue_subb2
  108 00000078 E1510008        CMP              r1, r8
  109 0000007C BA000001        BLT              done_diving2
  110 00000080 E0411008        SUB              r1, r1, r8
  111 00000084 EAFFFFFB        B                continue_subb2
  112 00000088         done_diving2
  113 00000088 E3510001        CMP              r1, #1
  114 0000008C 1A000045        BNE              eject_permission_rng_denied
  115 00000090         
  116 00000090         ;#######################################################
                       ################# 
  117 00000090         dead_enemy_start_over
  118 00000090         
  119 00000090         
  120 00000090         
  121 00000090         ;#######################################################
                       #################
  122 00000090 E59F03A8        LDR              r0, =T0TC
  123 00000094 E5901000        LDR              r1, [r0]
  124 00000098 E3E020FF        LDR              r2, =0xFFFFFF00
  125 0000009C E1C11002        BIC              r1, r1 , r2
  126 000000A0 E59F039C        LDR              r0, =keystork_rng_counter
  127 000000A4 E5902000        LDR              r2, [r0]
  128 000000A8 E0811002        ADD              r1, r1 ,r2
  129 000000AC E59F0394        LDR              r0, =current_keyboard_rng_input
  130 000000B0 E5902000        LDR              r2, [r0]
  131 000000B4 E0811002        ADD              r1, r1 ,r2
  132 000000B8 E3E020FF        LDR              r2, =0xFFFFFF00
  133 000000BC E1C11002        BIC              r1, r1 , r2
  134 000000C0         
  135 000000C0 E59FA370        LDR              r10, =number_of_loops
  136 000000C4 E5DA6000        LDRB             r6, [r10]
  137 000000C8 E0811006        ADD              r1, r1 ,r6
  138 000000CC         
  139 000000CC E3A08004        MOV              r8, #4      ; immediates enters
                                                             here shows the ran



ARM Macro Assembler    Page 5 


                                                            ge of random number
                                                            s
  140 000000D0         continue_subb3
  141 000000D0 E1510008        CMP              r1, r8
  142 000000D4 BA000001        BLT              done_diving3
  143 000000D8 E0411008        SUB              r1, r1, r8
  144 000000DC EAFFFFFB        B                continue_subb3
  145 000000E0         done_diving3
  146 000000E0         
  147 000000E0         ;#######################################################
                       ################# 
  148 000000E0         
  149 000000E0         ; r12 has the reminder from 0 to 4, 0 1 2 3 4 
  150 000000E0         ; enemy[x+1]offset = enemyoffset + 0x10 * x
  151 000000E0 E3A0A010        MOV              r10, #0x10
  152 000000E4 E0090A91        MUL              r9, r1, r10 ; r9 = 0x19 * x
  153 000000E8 E59F035C        LDR              r0, =enemyoffset
  154 000000EC E0898000        ADD              r8, r9, r0
  155 000000F0 E5987000        LDR              r7, [r8]    ;r7 stores the star
                                                            ting point of diffe
                                                            rents rows accordin
                                                            g to rng
  156 000000F4 E59F0354        LDR              r0, =right_enemycounts
  157 000000F8 E0896000        ADD              r6, r9, r0
  158 000000FC E5D65000        LDRB             r5, [r6]    ; r5 has the range 
                                                            conut for the next 
                                                            rng
  159 00000100         ;use right_offset_enemy_counts to set the range of which
                        enemys hits in row 
  160 00000100 E3550000        CMP              r5, #0
  161 00000104 0AFFFFE1        BEQ              dead_enemy_start_over
  162 00000108         ;#######################################################
                       ################# 
  163 00000108 E1A0B005        MOV              r11, r5
  164 0000010C         
  165 0000010C E59F032C        LDR              r0, =T0TC
  166 00000110 E5901000        LDR              r1, [r0]
  167 00000114 E3E020FF        LDR              r2, =0xFFFFFF00
  168 00000118 E1C11002        BIC              r1, r1 , r2
  169 0000011C E59F0320        LDR              r0, =keystork_rng_counter
  170 00000120 E5902000        LDR              r2, [r0]
  171 00000124 E0811002        ADD              r1, r1 ,r2
  172 00000128 E59F0318        LDR              r0, =current_keyboard_rng_input
  173 0000012C E5902000        LDR              r2, [r0]
  174 00000130 E0811002        ADD              r1, r1 ,r2
  175 00000134 E3E020FF        LDR              r2, =0xFFFFFF00
  176 00000138 E1C11002        BIC              r1, r1 , r2
  177 0000013C         
  178 0000013C E59FA2F4        LDR              r10, =number_of_loops
  179 00000140 E5DA6000        LDRB             r6, [r10]
  180 00000144 E1C66002        BIC              r6, r6, r2
  181 00000148 E0811006        ADD              r1, r1 ,r6
  182 0000014C         
  183 0000014C         
  184 0000014C         
  185 0000014C E1A08005        MOV              r8, r5      ; immediates enters
                                                             here shows the ran
                                                            ge of random number
                                                            s



ARM Macro Assembler    Page 6 


  186 00000150         continue_subb4
  187 00000150 E1510008        CMP              r1, r8
  188 00000154 BA000001        BLT              done_diving4
  189 00000158 E0411008        SUB              r1, r1, r8
  190 0000015C EAFFFFFB        B                continue_subb4
  191 00000160         done_diving4
  192 00000160 E1A04001        MOV              r4, r1
  193 00000164         
  194 00000164         ;#######################################################
                       ################# 
  195 00000164         ; r12 stores number range from 0 to right[0,1,2,3,4]_ene
                       mycounts
  196 00000164 E7F71004        LDRB             r1, [r7, r4]! ; r1 has the cont
                                                            ent of randomly sel
                                                            ected enemy
  197 00000168         
  198 00000168 E59F52C8        LDR              r5, =number_of_loops
  199 0000016C E5D56000        LDRB             r6, [r5]
  200 00000170 E2866001        ADD              r6, r6 ,#1
  201 00000174 E5C56000        STRB             r6, [r5]
  202 00000178         
  203 00000178         
  204 00000178 E3510020        CMP              r1, #0x20
  205 0000017C 0AFFFFC3        BEQ              dead_enemy_start_over
  206 00000180         ; CMP r1, #??
  207 00000180         ; BEQ dead_enemy_start_0ver
  208 00000180         
  209 00000180         ; at this point, we have successfully found the enemy th
                       at will be shooting projectile
  210 00000180         ; now, we look for that offset address + 0x19,
  211 00000180         next_row_for_placing_v
  212 00000180 E5F71019        LDRB             r1, [r7, #0x19]!
  213 00000184 E3510020        CMP              r1, #0x20
  214 00000188 1AFFFFFC        BNE              next_row_for_placing_v
  215 0000018C         
  216 0000018C E59F02A0        LDR              r0, =enemy_proj_offset
  217 00000190 E5807000        STR              r7, [r0]
  218 00000194 E3A00076        MOV              r0, #0x76
  219 00000198 E5C70000        STRB             r0, [r7]
  220 0000019C         
  221 0000019C E59F0298        LDR              r0, =enemy_proj_on_board
  222 000001A0         ;LDR r2, [rr
  223 000001A0 E3A01001        MOV              r1, #1
  224 000001A4 E5C01000        STRB             r1, [r0]
  225 000001A8         ; if its 0x20, set that location to our enemy_proj_offse
                       t
  226 000001A8         ; write 'v' to that location, 
  227 000001A8         ; write '1' to enemy_proj_on_board flag
  228 000001A8         
  229 000001A8         
  230 000001A8         eject_permission_rng_denied
  231 000001A8         
  232 000001A8         ;BL eject_enemy_proj 
  233 000001A8 E8BD5FFF        LDMFD            SP!, {r0-r12,lr}
  234 000001AC E12FFF1E        BX               lr
  235 000001B0         
  236 000001B0         
  237 000001B0         enemy_proj_motion
  238 000001B0 E92D5FFF        STMFD            SP!, {r0-r12,lr}



ARM Macro Assembler    Page 7 


  239 000001B4 E59F0278        LDR              r0, =enemy_proj_offset
  240 000001B8 E5901000        LDR              r1, [r0]
  241 000001BC         
  242 000001BC E5512019        LDRB             r2, [r1,#-0x19]
  243 000001C0 E352007E        CMP              r2, #0x7E
  244 000001C4 1A000001        BNE              its_norrrmal
  245 000001C8 E3A02020        MOV              r2, #0x20
  246 000001CC E5412019        STRB             r2, [r1,#-0x19]
  247 000001D0         its_norrrmal
  248 000001D0         
  249 000001D0         
  250 000001D0 E5F12019        LDRB             r2, [r1, #0x19]!
  251 000001D4         ; 5 Collision cases
  252 000001D4         ; 1. 'Space' 0x20, Space 
  253 000001D4         ;    keep motioning
  254 000001D4 E3520020        CMP              r2, #0x20
  255 000001D8 1A000001        BNE              didnt_hit_space
  256 000001DC EB000016        BL               enemy_proj_hits_space
  257 000001E0 EA000013        B                done_moving_once
  258 000001E4         didnt_hit_space
  259 000001E4         ; 2. 'S'     0x?   Strong shield
  260 000001E4         ;                write 0x20 to proj location
  261 000001E4         ;     write 's' to 'S' location
  262 000001E4         ;     set enemy_proj_on_board to 0
  263 000001E4 E3520053        CMP              r2, #0x53
  264 000001E8 1A000001        BNE              didnt_hit_Shield
  265 000001EC EB000029        BL               enemy_proj_hits_S
  266 000001F0 EA00000F        B                done_moving_once
  267 000001F4         didnt_hit_Shield
  268 000001F4         ; 3. 's'     0x?   Weak shield
  269 000001F4         ;       write 0x20 to both proj_location and 's' locatio
                       n
  270 000001F4         ;       set enemy_proj_on_board to 0
  271 000001F4 E3520073        CMP              r2, #0x73
  272 000001F8 1A000001        BNE              didnt_hit_shield
  273 000001FC EB000031        BL               enemy_proj_hits_s
  274 00000200 EA00000B        B                done_moving_once
  275 00000204         didnt_hit_shield
  276 00000204         ; 4. '^'     0x5E  Myship_projectile
  277 00000204         ;       write 0x20 to current proj_location
  278 00000204         ;       write '~' to collision spot
  279 00000204         ;     and more???????????????????
  280 00000204 E352005E        CMP              r2, #0x5E
  281 00000208 1A000001        BNE              didnt_hit_ourproj
  282 0000020C EB000038        BL               enemy_proj_hits_proj
  283 00000210 EA000007        B                done_moving_once
  284 00000214         didnt_hit_ourproj
  285 00000214         ; 5. 'A'     0x41  Call enemy_proj_hits_myship
  286 00000214 E3520041        CMP              r2, #0x41
  287 00000218 1A000001        BNE              didnt_hit_A
  288 0000021C EBFFFFFE        BL               enemy_proj_hits_myship
  289 00000220 EA000003        B                done_moving_once
  290 00000224         didnt_hit_A
  291 00000224         ; 6. '-' 0x2D Write 0x20 to current proj_location
  292 00000224         ;    set flag back to 0, 
  293 00000224 E352002D        CMP              r2, #0x2D
  294 00000228 1A000001        BNE              didnt_hit_wall
  295 0000022C EB00000F        BL               enemy_proj_hits_wall
  296 00000230 EAFFFFFF        B                done_moving_once



ARM Macro Assembler    Page 8 


  297 00000234         didnt_hit_wall
  298 00000234         done_moving_once
  299 00000234         ;BL update_map
  300 00000234         
  301 00000234 E8BD5FFF        LDMFD            SP!, {r0-r12,lr}
  302 00000238 E12FFF1E        BX               lr
  303 0000023C         
  304 0000023C         enemy_proj_hits_space
  305 0000023C E92D4000        STMFD            SP!, {lr}
  306 00000240         ; 1. 'Space' 0x20, Space 
  307 00000240         ;    keep motioning
  308 00000240         ; r1 is the collision location
  309 00000240         
  310 00000240         
  311 00000240 E59F01EC        LDR              r0, =enemy_proj_offset
  312 00000244 E5902000        LDR              r2, [r0]
  313 00000248 E5D23000        LDRB             r3, [r2]
  314 0000024C E3530076        CMP              r3, #0x76
  315 00000250 1A000001        BNE              idkkkkk
  316 00000254 E3A03020        MOV              r3, #0x20
  317 00000258 E5C23000        STRB             r3, [r2]
  318 0000025C         
  319 0000025C         idkkkkk
  320 0000025C         
  321 0000025C E3A03076        MOV              r3, #0x76
  322 00000260 E5C13000        STRB             r3, [r1]
  323 00000264 E5801000        STR              r1, [r0]
  324 00000268 E8BD4000        LDMFD            SP!, {lr}
  325 0000026C E12FFF1E        BX               lr
  326 00000270         
  327 00000270         enemy_proj_hits_wall
  328 00000270 E92D4000        STMFD            SP!, {lr}
  329 00000274         ; 6. '-' 0x2D Write 0x20 to current proj_location
  330 00000274         ;    set flag back to 0, 
  331 00000274 E59F01B8        LDR              r0, =enemy_proj_offset
  332 00000278 E5902000        LDR              r2, [r0]
  333 0000027C E3A03020        MOV              r3, #0x20
  334 00000280 E5C23000        STRB             r3, [r2]
  335 00000284         
  336 00000284         
  337 00000284         
  338 00000284 E59F01B0        LDR              r0, =enemy_proj_on_board
  339 00000288 E3A03000        MOV              r3, #0
  340 0000028C E5C03000        STRB             r3, [r0]
  341 00000290 E8BD4000        LDMFD            SP!, {lr}
  342 00000294 E12FFF1E        BX               lr
  343 00000298         
  344 00000298         
  345 00000298         
  346 00000298         
  347 00000298         enemy_proj_hits_S
  348 00000298 E92D4000        STMFD            SP!, {lr}
  349 0000029C         ; 2. 'S'     0x?   Strong shield
  350 0000029C         ;                write 0x20 to proj location
  351 0000029C         ;     write 's' to 'S' location
  352 0000029C         ;     set enemy_proj_on_board to 0
  353 0000029C         
  354 0000029C E59F0190        LDR              r0, =enemy_proj_offset
  355 000002A0 E5902000        LDR              r2, [r0]



ARM Macro Assembler    Page 9 


  356 000002A4 E3A03020        MOV              r3, #0x20
  357 000002A8 E5C23000        STRB             r3, [r2]
  358 000002AC         
  359 000002AC E3A03073        MOV              r3, #0x73
  360 000002B0 E5C13000        STRB             r3, [r1]
  361 000002B4         
  362 000002B4 E59F0180        LDR              r0, =enemy_proj_on_board
  363 000002B8 E3A03000        MOV              r3, #0
  364 000002BC E5C03000        STRB             r3, [r0]
  365 000002C0 E8BD4000        LDMFD            SP!, {lr}
  366 000002C4 E12FFF1E        BX               lr
  367 000002C8         
  368 000002C8         
  369 000002C8         enemy_proj_hits_s
  370 000002C8 E92D4000        STMFD            SP!, {lr}
  371 000002CC         ; 3. 's'     0x?   Weak shield
  372 000002CC         ;       write 0x20 to both proj_location and 's' locatio
                       n
  373 000002CC         ;       set enemy_proj_on_board to 0
  374 000002CC E59F0160        LDR              r0, =enemy_proj_offset
  375 000002D0 E5902000        LDR              r2, [r0]
  376 000002D4 E3A03020        MOV              r3, #0x20
  377 000002D8 E5C23000        STRB             r3, [r2]
  378 000002DC         
  379 000002DC E5C13000        STRB             r3, [r1]
  380 000002E0         
  381 000002E0 E59F0154        LDR              r0, =enemy_proj_on_board
  382 000002E4 E3A03000        MOV              r3, #0
  383 000002E8 E5C03000        STRB             r3, [r0]
  384 000002EC E8BD4000        LDMFD            SP!, {lr}
  385 000002F0 E12FFF1E        BX               lr
  386 000002F4         
  387 000002F4         
  388 000002F4         enemy_proj_hits_proj
  389 000002F4 E92D4000        STMFD            SP!, {lr}
  390 000002F8 E59F0134        LDR              r0, =enemy_proj_offset
  391 000002FC E5902000        LDR              r2, [r0]
  392 00000300 E3A03020        MOV              r3, #0x20
  393 00000304 E5C23000        STRB             r3, [r2]
  394 00000308         
  395 00000308 E3A0307E        MOV              r3, #0x7E
  396 0000030C E5C13000        STRB             r3, [r1]
  397 00000310 E5801000        STR              r1, [r0]
  398 00000314         
  399 00000314 E59F0138        LDR              r0, =proj_offset
  400 00000318 E5901000        LDR              r1, [r0]
  401 0000031C E2411019        SUB              r1, r1, #0x19
  402 00000320 E5801000        STR              r1, [r0]
  403 00000324         
  404 00000324         
  405 00000324 E8BD4000        LDMFD            SP!, {lr}
  406 00000328 E12FFF1E        BX               lr
  407 0000032C         
  408 0000032C         
  409 0000032C         enemy_proj_hits_myship
  410 0000032C E92D4000        STMFD            SP!, {lr}
  411 00000330         ;4-3-2-1
  412 00000330 E59F0120        LDR              r0, =current_score_100
  413 00000334 E5902000        LDR              r2, [r0]



ARM Macro Assembler    Page 10 


  414 00000338 E2422001        SUB              r2, r2 , #1
  415 0000033C         
  416 0000033C E3720001        CMP              r2, #-1
  417 00000340 AA000011        BGE              is_not_negative
  418 00000344         
  419 00000344 E59F0110        LDR              r0, =current_score_1000
  420 00000348 E5901000        LDR              r1, [r0]
  421 0000034C E3510000        CMP              r1, #0
  422 00000350 1A000008        BNE              its_more_than_9000
  423 00000354         
  424 00000354 E3A01000        MOV              r1, #0
  425 00000358 E5801000        STR              r1, [r0]
  426 0000035C E59F00F4        LDR              r0, =current_score_100
  427 00000360 E5801000        STR              r1, [r0]
  428 00000364 E59F00F4        LDR              r0, =current_score_10
  429 00000368 E5801000        STR              r1, [r0]
  430 0000036C E59F00F0        LDR              r0, =current_score_1
  431 00000370 E5801000        STR              r1, [r0]
  432 00000374 EA000006        B                done_with_subtracting_all2
  433 00000378         
  434 00000378         its_more_than_9000
  435 00000378 E3A02009        MOV              r2, #9
  436 0000037C E59F00D8        LDR              r0, =current_score_1000
  437 00000380 E5901000        LDR              r1, [r0]
  438 00000384 E2411001        SUB              r1, r1, #1
  439 00000388 E5801000        STR              r1, [r0]
  440 0000038C         
  441 0000038C         is_not_negative
  442 0000038C E59F00C4        LDR              r0, =current_score_100
  443 00000390 E5802000        STR              r2, [r0]
  444 00000394         
  445 00000394         done_with_subtracting_all2
  446 00000394         
  447 00000394 E59F0098        LDR              r0, =enemy_proj_offset
  448 00000398 E5902000        LDR              r2, [r0]
  449 0000039C E3A03020        MOV              r3, #0x20
  450 000003A0 E5C23000        STRB             r3, [r2]
  451 000003A4         
  452 000003A4 E59F0090        LDR              r0, =enemy_proj_on_board
  453 000003A8 E3A03000        MOV              r3, #0
  454 000003AC E5C03000        STRB             r3, [r0]
  455 000003B0         
  456 000003B0         three_life_left                      ;4 minus 1 life
  457 000003B0         ;check flag, too see how many life left
  458 000003B0         ;check if flag is 4, when shot; call 3 life left.
  459 000003B0         ;SUB 100 from points
  460 000003B0 E59F00B0        LDR              r0, =lives
  461 000003B4 E5901000        LDR              r1, [r0]
  462 000003B8 E3510004        CMP              r1, #4
  463 000003BC 1A000005        BNE              two_life_left
  464 000003C0 E2411001        SUB              r1, r1, #1
  465 000003C4 E5801000        STR              r1, [r0]
  466 000003C8         
  467 000003C8         ;lights up p1. 16 17 18 led only
  468 000003C8 E59F009C        LDR              r0, =IO1SET
  469 000003CC E3A01702        LDR              r1, =0x00080000
  470 000003D0 E5801000        STR              r1, [r0]
  471 000003D4 EA000014        B                exit_this
  472 000003D8         two_life_left                        ;3 minus 1 life



ARM Macro Assembler    Page 11 


  473 000003D8         ;check flag too see how mnay life left
  474 000003D8         ;check for 3, when shot 
  475 000003D8         ;sub 100 from points
  476 000003D8 E3510003        CMP              r1, #3
  477 000003DC 1A000005        BNE              one_life_left
  478 000003E0 E2411001        SUB              r1, r1, #1
  479 000003E4 E5801000        STR              r1, [r0]
  480 000003E8         
  481 000003E8         ;lights up p1.16 and 17 led only
  482 000003E8 E59F007C        LDR              r0, =IO1SET
  483 000003EC E3A01703        LDR              r1, =0x000C0000
  484 000003F0 E5801000        STR              r1, [r0]
  485 000003F4         
  486 000003F4 EA00000C        B                exit_this
  487 000003F8         one_life_left                        ;2 minues one life
  488 000003F8         ;sub 100 from points
  489 000003F8 E3510002        CMP              r1, #2
  490 000003FC 1A000005        BNE              game_over
  491 00000400 E2411001        SUB              r1, r1, #1
  492 00000404 E5801000        STR              r1, [r0]
  493 00000408         
  494 00000408         ;lights up p1.16 led only
  495 00000408 E59F005C        LDR              r0, =IO1SET
  496 0000040C E3A0180E        LDR              r1, =0x000E0000
  497 00000410 E5801000        STR              r1, [r0]
  498 00000414         
  499 00000414 EA000004        B                exit_this
  500 00000418         
  501 00000418         game_over                            ;1 minus 1, gg
  502 00000418         ;sub100 from points then output score
  503 00000418         
  504 00000418 E59F0048        LDR              r0, =lives
  505 0000041C E5901000        LDR              r1, [r0]
  506 00000420 E2411001        SUB              r1, r1, #1
  507 00000424 E5801000        STR              r1, [r0]
  508 00000428         
  509 00000428 EAFFFFFE        B                endgame
  510 0000042C         
  511 0000042C         
  512 0000042C         exit_this
  513 0000042C         
  514 0000042C E8BD4000        LDMFD            SP!, {lr}
  515 00000430 E12FFF1E        BX               lr
  516 00000434         
  517 00000434         
  518 00000434                 END
              400074A0 
              40007544 
              400074B0 
              E0004008 
              40007990 
              40007994 
              40007120 
              40007370 
              40007400 
              40006908 
              4000690C 
              40006904 
              40006900 



ARM Macro Assembler    Page 12 


              40005000 
              E0028014 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\enemy_proj.d -o.\objects\enemy_proj.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Kei
l_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 518" --list=.\listings\enemy_proj.lst enem
y_proj.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

GPIO 00000000

Symbol: GPIO
   Definitions
      At line 1 in file enemy_proj.s
   Uses
      None
Comment: GPIO unused
continue_subb2 00000078

Symbol: continue_subb2
   Definitions
      At line 107 in file enemy_proj.s
   Uses
      At line 111 in file enemy_proj.s
Comment: continue_subb2 used once
continue_subb3 000000D0

Symbol: continue_subb3
   Definitions
      At line 140 in file enemy_proj.s
   Uses
      At line 144 in file enemy_proj.s
Comment: continue_subb3 used once
continue_subb4 00000150

Symbol: continue_subb4
   Definitions
      At line 186 in file enemy_proj.s
   Uses
      At line 190 in file enemy_proj.s
Comment: continue_subb4 used once
dead_enemy_start_over 00000090

Symbol: dead_enemy_start_over
   Definitions
      At line 117 in file enemy_proj.s
   Uses
      At line 161 in file enemy_proj.s
      At line 205 in file enemy_proj.s

didnt_hit_A 00000224

Symbol: didnt_hit_A
   Definitions
      At line 290 in file enemy_proj.s
   Uses
      At line 287 in file enemy_proj.s
Comment: didnt_hit_A used once
didnt_hit_Shield 000001F4

Symbol: didnt_hit_Shield
   Definitions
      At line 267 in file enemy_proj.s
   Uses
      At line 264 in file enemy_proj.s
Comment: didnt_hit_Shield used once
didnt_hit_ourproj 00000214




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: didnt_hit_ourproj
   Definitions
      At line 284 in file enemy_proj.s
   Uses
      At line 281 in file enemy_proj.s
Comment: didnt_hit_ourproj used once
didnt_hit_shield 00000204

Symbol: didnt_hit_shield
   Definitions
      At line 275 in file enemy_proj.s
   Uses
      At line 272 in file enemy_proj.s
Comment: didnt_hit_shield used once
didnt_hit_space 000001E4

Symbol: didnt_hit_space
   Definitions
      At line 258 in file enemy_proj.s
   Uses
      At line 255 in file enemy_proj.s
Comment: didnt_hit_space used once
didnt_hit_wall 00000234

Symbol: didnt_hit_wall
   Definitions
      At line 297 in file enemy_proj.s
   Uses
      At line 294 in file enemy_proj.s
Comment: didnt_hit_wall used once
done_diving2 00000088

Symbol: done_diving2
   Definitions
      At line 112 in file enemy_proj.s
   Uses
      At line 109 in file enemy_proj.s
Comment: done_diving2 used once
done_diving3 000000E0

Symbol: done_diving3
   Definitions
      At line 145 in file enemy_proj.s
   Uses
      At line 142 in file enemy_proj.s
Comment: done_diving3 used once
done_diving4 00000160

Symbol: done_diving4
   Definitions
      At line 191 in file enemy_proj.s
   Uses
      At line 188 in file enemy_proj.s
Comment: done_diving4 used once
done_moving_once 00000234

Symbol: done_moving_once
   Definitions
      At line 298 in file enemy_proj.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 257 in file enemy_proj.s
      At line 266 in file enemy_proj.s
      At line 274 in file enemy_proj.s
      At line 283 in file enemy_proj.s
      At line 289 in file enemy_proj.s
      At line 296 in file enemy_proj.s

done_with_subtracting_all2 00000394

Symbol: done_with_subtracting_all2
   Definitions
      At line 445 in file enemy_proj.s
   Uses
      At line 432 in file enemy_proj.s
Comment: done_with_subtracting_all2 used once
eject_enemy_proj 00000030

Symbol: eject_enemy_proj
   Definitions
      At line 86 in file enemy_proj.s
   Uses
      At line 9 in file enemy_proj.s
Comment: eject_enemy_proj used once
eject_permission_rng_denied 000001A8

Symbol: eject_permission_rng_denied
   Definitions
      At line 230 in file enemy_proj.s
   Uses
      At line 114 in file enemy_proj.s
Comment: eject_permission_rng_denied used once
enemy_proj_hits_S 00000298

Symbol: enemy_proj_hits_S
   Definitions
      At line 347 in file enemy_proj.s
   Uses
      At line 265 in file enemy_proj.s
Comment: enemy_proj_hits_S used once
enemy_proj_hits_myship 0000032C

Symbol: enemy_proj_hits_myship
   Definitions
      At line 409 in file enemy_proj.s
   Uses
      At line 12 in file enemy_proj.s
      At line 288 in file enemy_proj.s

enemy_proj_hits_proj 000002F4

Symbol: enemy_proj_hits_proj
   Definitions
      At line 388 in file enemy_proj.s
   Uses
      At line 282 in file enemy_proj.s
Comment: enemy_proj_hits_proj used once
enemy_proj_hits_s 000002C8




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: enemy_proj_hits_s
   Definitions
      At line 369 in file enemy_proj.s
   Uses
      At line 273 in file enemy_proj.s
Comment: enemy_proj_hits_s used once
enemy_proj_hits_space 0000023C

Symbol: enemy_proj_hits_space
   Definitions
      At line 304 in file enemy_proj.s
   Uses
      At line 256 in file enemy_proj.s
Comment: enemy_proj_hits_space used once
enemy_proj_hits_wall 00000270

Symbol: enemy_proj_hits_wall
   Definitions
      At line 327 in file enemy_proj.s
   Uses
      At line 295 in file enemy_proj.s
Comment: enemy_proj_hits_wall used once
enemy_proj_motion 000001B0

Symbol: enemy_proj_motion
   Definitions
      At line 237 in file enemy_proj.s
   Uses
      At line 11 in file enemy_proj.s
Comment: enemy_proj_motion used once
enemy_proj_setups 00000000

Symbol: enemy_proj_setups
   Definitions
      At line 66 in file enemy_proj.s
   Uses
      At line 10 in file enemy_proj.s
Comment: enemy_proj_setups used once
exit_this 0000042C

Symbol: exit_this
   Definitions
      At line 512 in file enemy_proj.s
   Uses
      At line 471 in file enemy_proj.s
      At line 486 in file enemy_proj.s
      At line 499 in file enemy_proj.s

game_over 00000418

Symbol: game_over
   Definitions
      At line 501 in file enemy_proj.s
   Uses
      At line 490 in file enemy_proj.s
Comment: game_over used once
idkkkkk 0000025C

Symbol: idkkkkk



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 319 in file enemy_proj.s
   Uses
      At line 315 in file enemy_proj.s
Comment: idkkkkk used once
is_not_negative 0000038C

Symbol: is_not_negative
   Definitions
      At line 441 in file enemy_proj.s
   Uses
      At line 417 in file enemy_proj.s
Comment: is_not_negative used once
its_more_than_9000 00000378

Symbol: its_more_than_9000
   Definitions
      At line 434 in file enemy_proj.s
   Uses
      At line 422 in file enemy_proj.s
Comment: its_more_than_9000 used once
its_norrrmal 000001D0

Symbol: its_norrrmal
   Definitions
      At line 247 in file enemy_proj.s
   Uses
      At line 244 in file enemy_proj.s
Comment: its_norrrmal used once
next_row_for_placing_v 00000180

Symbol: next_row_for_placing_v
   Definitions
      At line 211 in file enemy_proj.s
   Uses
      At line 214 in file enemy_proj.s
Comment: next_row_for_placing_v used once
one_life_left 000003F8

Symbol: one_life_left
   Definitions
      At line 487 in file enemy_proj.s
   Uses
      At line 477 in file enemy_proj.s
Comment: one_life_left used once
three_life_left 000003B0

Symbol: three_life_left
   Definitions
      At line 456 in file enemy_proj.s
   Uses
      None
Comment: three_life_left unused
two_life_left 000003D8

Symbol: two_life_left
   Definitions
      At line 472 in file enemy_proj.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 463 in file enemy_proj.s
Comment: two_life_left used once
36 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 22 in file enemy_proj.s
   Uses
      None
Comment: IO0CLR unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 21 in file enemy_proj.s
   Uses
      None
Comment: IO0SET unused
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 24 in file enemy_proj.s
   Uses
      None
Comment: IO1CLR unused
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 23 in file enemy_proj.s
   Uses
      At line 468 in file enemy_proj.s
      At line 482 in file enemy_proj.s
      At line 495 in file enemy_proj.s

Ss2_storing_address 40007430

Symbol: Ss2_storing_address
   Definitions
      At line 18 in file enemy_proj.s
   Uses
      None
Comment: Ss2_storing_address unused
Ss_storing_address 40007420

Symbol: Ss_storing_address
   Definitions
      At line 17 in file enemy_proj.s
   Uses
      None
Comment: Ss_storing_address unused
T0TC E0004008

Symbol: T0TC
   Definitions
      At line 60 in file enemy_proj.s
   Uses
      At line 91 in file enemy_proj.s
      At line 122 in file enemy_proj.s
      At line 165 in file enemy_proj.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


current_keyboard_rng_input 40007994

Symbol: current_keyboard_rng_input
   Definitions
      At line 59 in file enemy_proj.s
   Uses
      At line 98 in file enemy_proj.s
      At line 129 in file enemy_proj.s
      At line 172 in file enemy_proj.s

current_score_1 40006900

Symbol: current_score_1
   Definitions
      At line 51 in file enemy_proj.s
   Uses
      At line 430 in file enemy_proj.s
Comment: current_score_1 used once
current_score_10 40006904

Symbol: current_score_10
   Definitions
      At line 52 in file enemy_proj.s
   Uses
      At line 428 in file enemy_proj.s
Comment: current_score_10 used once
current_score_100 40006908

Symbol: current_score_100
   Definitions
      At line 53 in file enemy_proj.s
   Uses
      At line 412 in file enemy_proj.s
      At line 426 in file enemy_proj.s
      At line 442 in file enemy_proj.s

current_score_1000 4000690C

Symbol: current_score_1000
   Definitions
      At line 54 in file enemy_proj.s
   Uses
      At line 419 in file enemy_proj.s
      At line 436 in file enemy_proj.s

currentscore_location 40007A40

Symbol: currentscore_location
   Definitions
      At line 63 in file enemy_proj.s
   Uses
      None
Comment: currentscore_location unused
enemy2counts 40007280

Symbol: enemy2counts
   Definitions
      At line 32 in file enemy_proj.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: enemy2counts unused
enemy2offset 40007130

Symbol: enemy2offset
   Definitions
      At line 27 in file enemy_proj.s
   Uses
      None
Comment: enemy2offset unused
enemy3counts 40007290

Symbol: enemy3counts
   Definitions
      At line 33 in file enemy_proj.s
   Uses
      None
Comment: enemy3counts unused
enemy3offset 40007140

Symbol: enemy3offset
   Definitions
      At line 28 in file enemy_proj.s
   Uses
      None
Comment: enemy3offset unused
enemy4counts 400072A0

Symbol: enemy4counts
   Definitions
      At line 34 in file enemy_proj.s
   Uses
      None
Comment: enemy4counts unused
enemy4offset 40007150

Symbol: enemy4offset
   Definitions
      At line 29 in file enemy_proj.s
   Uses
      None
Comment: enemy4offset unused
enemy5counts 400072B0

Symbol: enemy5counts
   Definitions
      At line 35 in file enemy_proj.s
   Uses
      None
Comment: enemy5counts unused
enemy5offset 40007160

Symbol: enemy5offset
   Definitions
      At line 30 in file enemy_proj.s
   Uses
      None
Comment: enemy5offset unused



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

enemy_proj_offset 400074A0

Symbol: enemy_proj_offset
   Definitions
      At line 48 in file enemy_proj.s
   Uses
      At line 69 in file enemy_proj.s
      At line 216 in file enemy_proj.s
      At line 239 in file enemy_proj.s
      At line 311 in file enemy_proj.s
      At line 331 in file enemy_proj.s
      At line 354 in file enemy_proj.s
      At line 374 in file enemy_proj.s
      At line 390 in file enemy_proj.s
      At line 447 in file enemy_proj.s

enemy_proj_on_board 400074B0

Symbol: enemy_proj_on_board
   Definitions
      At line 49 in file enemy_proj.s
   Uses
      At line 79 in file enemy_proj.s
      At line 221 in file enemy_proj.s
      At line 338 in file enemy_proj.s
      At line 362 in file enemy_proj.s
      At line 381 in file enemy_proj.s
      At line 452 in file enemy_proj.s

enemycounts 40007270

Symbol: enemycounts
   Definitions
      At line 31 in file enemy_proj.s
   Uses
      None
Comment: enemycounts unused
enemyoffset 40007120

Symbol: enemyoffset
   Definitions
      At line 26 in file enemy_proj.s
   Uses
      At line 153 in file enemy_proj.s
Comment: enemyoffset used once
keystork_rng_counter 40007990

Symbol: keystork_rng_counter
   Definitions
      At line 58 in file enemy_proj.s
   Uses
      At line 95 in file enemy_proj.s
      At line 126 in file enemy_proj.s
      At line 169 in file enemy_proj.s

lives 40005000

Symbol: lives
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      At line 20 in file enemy_proj.s
   Uses
      At line 460 in file enemy_proj.s
      At line 504 in file enemy_proj.s

mothership_location 40007A20

Symbol: mothership_location
   Definitions
      At line 61 in file enemy_proj.s
   Uses
      None
Comment: mothership_location unused
number_of_loops 40007544

Symbol: number_of_loops
   Definitions
      At line 46 in file enemy_proj.s
   Uses
      At line 73 in file enemy_proj.s
      At line 103 in file enemy_proj.s
      At line 135 in file enemy_proj.s
      At line 178 in file enemy_proj.s
      At line 198 in file enemy_proj.s

offset2_hit_counts 40007510

Symbol: offset2_hit_counts
   Definitions
      At line 42 in file enemy_proj.s
   Uses
      None
Comment: offset2_hit_counts unused
offset3_hit_counts 40007520

Symbol: offset3_hit_counts
   Definitions
      At line 43 in file enemy_proj.s
   Uses
      None
Comment: offset3_hit_counts unused
offset4_hit_counts 40007530

Symbol: offset4_hit_counts
   Definitions
      At line 44 in file enemy_proj.s
   Uses
      None
Comment: offset4_hit_counts unused
offset5_hit_counts 40007540

Symbol: offset5_hit_counts
   Definitions
      At line 45 in file enemy_proj.s
   Uses
      None
Comment: offset5_hit_counts unused
offset_hit_counts 40007500




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: offset_hit_counts
   Definitions
      At line 41 in file enemy_proj.s
   Uses
      None
Comment: offset_hit_counts unused
proj_exist_on_board_flag 40007410

Symbol: proj_exist_on_board_flag
   Definitions
      At line 16 in file enemy_proj.s
   Uses
      None
Comment: proj_exist_on_board_flag unused
proj_offset 40007400

Symbol: proj_offset
   Definitions
      At line 14 in file enemy_proj.s
   Uses
      At line 399 in file enemy_proj.s
Comment: proj_offset used once
promptoffset 40007100

Symbol: promptoffset
   Definitions
      At line 13 in file enemy_proj.s
   Uses
      None
Comment: promptoffset unused
right_enemy2counts 40007380

Symbol: right_enemy2counts
   Definitions
      At line 37 in file enemy_proj.s
   Uses
      None
Comment: right_enemy2counts unused
right_enemy3counts 40007390

Symbol: right_enemy3counts
   Definitions
      At line 38 in file enemy_proj.s
   Uses
      None
Comment: right_enemy3counts unused
right_enemy4counts 400073A0

Symbol: right_enemy4counts
   Definitions
      At line 39 in file enemy_proj.s
   Uses
      None
Comment: right_enemy4counts unused
right_enemy5counts 400073B0

Symbol: right_enemy5counts
   Definitions
      At line 40 in file enemy_proj.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

   Uses
      None
Comment: right_enemy5counts unused
right_enemycounts 40007370

Symbol: right_enemycounts
   Definitions
      At line 36 in file enemy_proj.s
   Uses
      At line 156 in file enemy_proj.s
Comment: right_enemycounts used once
selected_enemy_that_shoot_proj 40007440

Symbol: selected_enemy_that_shoot_proj
   Definitions
      At line 19 in file enemy_proj.s
   Uses
      None
Comment: selected_enemy_that_shoot_proj unused
ship_location 40006000

Symbol: ship_location
   Definitions
      At line 15 in file enemy_proj.s
   Uses
      None
Comment: ship_location unused
timeused_location 40007A30

Symbol: timeused_location
   Definitions
      At line 62 in file enemy_proj.s
   Uses
      None
Comment: timeused_location unused
total_score 40006920

Symbol: total_score
   Definitions
      At line 56 in file enemy_proj.s
   Uses
      None
Comment: total_score unused
46 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

FIQ_Handler 00000000

Symbol: FIQ_Handler
   Definitions
      At line 3 in file enemy_proj.s
   Uses
      None
Comment: FIQ_Handler unused
end_of_code 00000000

Symbol: end_of_code
   Definitions
      At line 4 in file enemy_proj.s
   Uses
      None
Comment: end_of_code unused
endgame 00000000

Symbol: endgame
   Definitions
      At line 8 in file enemy_proj.s
   Uses
      At line 509 in file enemy_proj.s
Comment: endgame used once
newline 00000000

Symbol: newline
   Definitions
      At line 7 in file enemy_proj.s
   Uses
      None
Comment: newline unused
output_string 00000000

Symbol: output_string
   Definitions
      At line 2 in file enemy_proj.s
   Uses
      None
Comment: output_string unused
rng 00000000

Symbol: rng
   Definitions
      At line 5 in file enemy_proj.s
   Uses
      None
Comment: rng unused
update_map 00000000

Symbol: update_map
   Definitions
      At line 6 in file enemy_proj.s
   Uses
      None
Comment: update_map unused
7 symbols
423 symbols in table
